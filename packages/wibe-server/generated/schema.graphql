input IntWhereInput {
  equalTo: Int
  greaterThan: Int
  greaterThanOrEqualTo: Int
  in: [Int]
  lessThan: Int
  lessThanOrEqualTo: Int
  notEqualTo: Int
  notIn: [Int]
}

type Mutation {
  createUser(input: UserCreateInput): User!
  createUsers(input: [UserCreateInput]): [User]
  deleteUser(input: UserDeleteInput): User!
  deleteUsers(input: UsersDeleteInput): [User]!
  updateUser(input: UserUpdateInput): User!
  updateUsers(input: UsersUpdateInput): [User]!
}

type Query {
  user(id: String): User!
  users: [User]
}

input StringWhereInput {
  equalTo: String
  in: [String]
  notEqualTo: String
  notIn: [String]
}

type User {
  age: Int
  name: String
}

input UserCreateInput {
  age: Int
  name: String
}

input UserDeleteInput {
  id: String
}

input UserUpdateInput {
  fields: UserCreateInput
  id: String
}

input UserWhereInput {
  age: IntWhereInput
  name: StringWhereInput
}

input UsersDeleteInput {
  where: UserWhereInput
}

input UsersUpdateInput {
  fields: UserCreateInput
  where: UserWhereInput
}