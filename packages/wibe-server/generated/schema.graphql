"""Phone custom scalar type"""
scalar Phone

enum Role {
  Admin
  Member
}

enum AuthenticationProvider {
  Google
}

type Post {
  id: ID!
  name: String!
}

"""User class"""
type _User {
  id: ID!
  name: String
  age: Int
  isCool: Boolean
  email: Email
  birthDate: Date
  phone: Phone
  role: Role
  address: _UserAddress
  object: _UserObject
  authentication: _UserAuthentication
  provider: AuthenticationProvider
  verifiedEmail: Boolean
  createdAt: Date
  updatedAt: Date
}

"""Email scalar type"""
scalar Email

"""Date scalar type"""
scalar Date

type _UserAddress {
  address1: String
  address2: String
  postalCode: Int
  city: String
  country: String
}

type _UserObject {
  objectOfObject: _UserObjectObjectOfObject
}

type _UserObjectObjectOfObject {
  name: String
}

type _UserAuthentication {
  emailPassword: _UserAuthenticationEmailPassword
  google: _UserAuthenticationGoogle
  OTP: _UserAuthenticationOTP
}

type _UserAuthenticationEmailPassword {
  email: Email!
  password: String!
  accessToken: String
  refreshToken: String
}

type _UserAuthenticationGoogle {
  idToken: String!
  email: Email!
  verifiedEmail: Boolean!
  accessToken: String
  refreshToken: String
}

type _UserAuthenticationOTP

type Query {
  post(id: ID): Post
  posts(where: PostWhereInput, offset: Int, limit: Int): PostConnection!

  """User class"""
  _user(id: ID): _User

  """User class"""
  _users(where: _UserWhereInput, offset: Int, limit: Int): _UserConnection!

  """Hello world description"""
  helloWorld(name: String!): String
}

type PostConnection {
  edges: [PostEdge]
}

type PostEdge {
  node: Post!
}

input PostWhereInput {
  name: StringWhereInput
  OR: [PostWhereInput]
  AND: [PostWhereInput]
}

input StringWhereInput {
  equalTo: String
  notEqualTo: String
  in: [String]
  notIn: [String]
}

type _UserConnection {
  edges: [_UserEdge]
}

type _UserEdge {
  node: _User!
}

"""User class"""
input _UserWhereInput {
  name: StringWhereInput
  age: IntWhereInput
  isCool: BooleanWhereInput
  email: EmailWhereInput
  birthDate: DateWhereInput
  phone: AnyWhereInput
  role: AnyWhereInput
  address: _UserAddressWhereInput
  object: _UserObjectWhereInput
  authentication: _UserAuthenticationWhereInput
  provider: AnyWhereInput
  verifiedEmail: BooleanWhereInput
  createdAt: DateWhereInput
  updatedAt: DateWhereInput
  OR: [_UserWhereInput]
  AND: [_UserWhereInput]
}

input IntWhereInput {
  equalTo: Int
  notEqualTo: Int
  lessThan: Int
  lessThanOrEqualTo: Int
  greaterThan: Int
  greaterThanOrEqualTo: Int
  in: [Int]
  notIn: [Int]
}

input BooleanWhereInput {
  equalTo: Boolean
  notEqualTo: Boolean
  in: [Boolean]
  notIn: [Boolean]
}

input EmailWhereInput {
  equalTo: Email
  notEqualTo: Email
  in: [Email]
  notIn: [Email]
}

input DateWhereInput {
  equalTo: Date
  notEqualTo: Date
  in: [Date]
  notIn: [Date]
  lessThan: Date
  lessThanOrEqualTo: Date
  greaterThan: Date
  greaterThanOrEqualTo: Date
}

input AnyWhereInput {
  equalTo: Any
  notEqualTo: Any
}

"""
The Any scalar type is used in operations and types that involve any type of value.
"""
scalar Any

input _UserAddressWhereInput {
  address1: StringWhereInput
  address2: StringWhereInput
  postalCode: IntWhereInput
  city: StringWhereInput
  country: StringWhereInput
  OR: [_UserAddressWhereInput]
  AND: [_UserAddressWhereInput]
}

input _UserObjectWhereInput {
  objectOfObject: _UserObjectObjectOfObjectWhereInput
  OR: [_UserObjectWhereInput]
  AND: [_UserObjectWhereInput]
}

input _UserObjectObjectOfObjectWhereInput {
  name: StringWhereInput
  OR: [_UserObjectObjectOfObjectWhereInput]
  AND: [_UserObjectObjectOfObjectWhereInput]
}

input _UserAuthenticationWhereInput {
  emailPassword: _UserAuthenticationEmailPasswordWhereInput
  google: _UserAuthenticationGoogleWhereInput
  OTP: _UserAuthenticationOTPWhereInput
  OR: [_UserAuthenticationWhereInput]
  AND: [_UserAuthenticationWhereInput]
}

input _UserAuthenticationEmailPasswordWhereInput {
  email: EmailWhereInput
  password: StringWhereInput
  accessToken: StringWhereInput
  refreshToken: StringWhereInput
  OR: [_UserAuthenticationEmailPasswordWhereInput]
  AND: [_UserAuthenticationEmailPasswordWhereInput]
}

input _UserAuthenticationGoogleWhereInput {
  idToken: StringWhereInput
  email: EmailWhereInput
  verifiedEmail: BooleanWhereInput
  accessToken: StringWhereInput
  refreshToken: StringWhereInput
  OR: [_UserAuthenticationGoogleWhereInput]
  AND: [_UserAuthenticationGoogleWhereInput]
}

input _UserAuthenticationOTPWhereInput {
  OR: [_UserAuthenticationOTPWhereInput]
  AND: [_UserAuthenticationOTPWhereInput]
}

type Mutation {
  createPost(input: PostCreateInput): Post!
  createPosts(input: PostsCreateInput): PostConnection!
  updatePost(input: PostUpdateInput): Post!
  updatePosts(input: PostsUpdateInput): PostConnection!
  deletePost(input: PostDeleteInput): Post!
  deletePosts(input: PostsDeleteInput): PostConnection!

  """User class"""
  create_User(input: _UserCreateInput): _User!

  """User class"""
  create_Users(input: _UsersCreateInput): _UserConnection!

  """User class"""
  update_User(input: _UserUpdateInput): _User!

  """User class"""
  update_Users(input: _UsersUpdateInput): _UserConnection!

  """User class"""
  delete_User(input: _UserDeleteInput): _User!

  """User class"""
  delete_Users(input: _UsersDeleteInput): _UserConnection!
  createMutation(input: CreateMutationInput): Boolean!
  customMutation(input: CustomMutationInput): Int
  secondCustomMutation(input: SecondCustomMutationInput): Int
  signInWith(input: SignInWithInput): Boolean
  signUpWith(input: SignUpWithInput): Boolean
}

input PostCreateInput {
  fields: PostInput
}

input PostInput {
  name: String!
}

input PostsCreateInput {
  fields: [PostInput]!
  offset: Int
  limit: Int
}

input PostUpdateInput {
  id: ID
  fields: PostUpdateFieldsInput
}

input PostUpdateFieldsInput {
  name: String
}

input PostsUpdateInput {
  fields: PostUpdateFieldsInput
  where: PostWhereInput
  offset: Int
  limit: Int
}

input PostDeleteInput {
  id: ID
}

input PostsDeleteInput {
  where: PostWhereInput
}

input _UserCreateInput {
  fields: _UserInput
}

"""User class"""
input _UserInput {
  name: String
  age: Int
  isCool: Boolean
  email: Email
  birthDate: Date
  phone: Phone
  role: Role
  address: _UserAddressInput
  object: _UserObjectInput
  authentication: _UserAuthenticationInput
  provider: AuthenticationProvider
  verifiedEmail: Boolean
  createdAt: Date
  updatedAt: Date
}

input _UserAddressInput {
  address1: String
  address2: String
  postalCode: Int
  city: String
  country: String
}

input _UserObjectInput {
  objectOfObject: _UserObjectObjectOfObjectInput
}

input _UserObjectObjectOfObjectInput {
  name: String
}

input _UserAuthenticationInput {
  emailPassword: _UserAuthenticationEmailPasswordInput
  google: _UserAuthenticationGoogleInput
  OTP: _UserAuthenticationOTPInput
}

input _UserAuthenticationEmailPasswordInput {
  email: Email!
  password: String!
  accessToken: String
  refreshToken: String
}

input _UserAuthenticationGoogleInput {
  idToken: String!
  email: Email!
  verifiedEmail: Boolean!
  accessToken: String
  refreshToken: String
}

input _UserAuthenticationOTPInput

input _UsersCreateInput {
  fields: [_UserInput]!
  offset: Int
  limit: Int
}

input _UserUpdateInput {
  id: ID
  fields: _UserUpdateFieldsInput
}

"""User class"""
input _UserUpdateFieldsInput {
  name: String
  age: Int
  isCool: Boolean
  email: Email
  birthDate: Date
  phone: Phone
  role: Role
  address: _UserAddressUpdateFieldsInput
  object: _UserObjectUpdateFieldsInput
  authentication: _UserAuthenticationUpdateFieldsInput
  provider: AuthenticationProvider
  verifiedEmail: Boolean
  createdAt: Date
  updatedAt: Date
}

input _UserAddressUpdateFieldsInput {
  address1: String
  address2: String
  postalCode: Int
  city: String
  country: String
}

input _UserObjectUpdateFieldsInput {
  objectOfObject: _UserObjectObjectOfObjectUpdateFieldsInput
}

input _UserObjectObjectOfObjectUpdateFieldsInput {
  name: String
}

input _UserAuthenticationUpdateFieldsInput {
  emailPassword: _UserAuthenticationEmailPasswordUpdateFieldsInput
  google: _UserAuthenticationGoogleUpdateFieldsInput
  OTP: _UserAuthenticationOTPUpdateFieldsInput
}

input _UserAuthenticationEmailPasswordUpdateFieldsInput {
  email: Email
  password: String
  accessToken: String
  refreshToken: String
}

input _UserAuthenticationGoogleUpdateFieldsInput {
  idToken: String
  email: Email
  verifiedEmail: Boolean
  accessToken: String
  refreshToken: String
}

input _UserAuthenticationOTPUpdateFieldsInput

input _UsersUpdateInput {
  fields: _UserUpdateFieldsInput
  where: _UserWhereInput
  offset: Int
  limit: Int
}

input _UserDeleteInput {
  id: ID
}

input _UsersDeleteInput {
  where: _UserWhereInput
}

input CreateMutationInput {
  name: Int!
}

input CustomMutationInput {
  a: Int!
  b: Int!
}

input SecondCustomMutationInput {
  sum: SecondCustomMutationSumInput
}

input SecondCustomMutationSumInput {
  a: Int!
  b: Int!
}

input SignInWithInput {
  authentication: SignInWithAuthenticationInput
}

input SignInWithAuthenticationInput {
  emailPassword: SignInWithAuthenticationEmailPasswordInput
  google: SignInWithAuthenticationGoogleInput
  OTP: SignInWithAuthenticationOTPInput
}

input SignInWithAuthenticationEmailPasswordInput {
  email: Email!
  password: String!
}

input SignInWithAuthenticationGoogleInput {
  authorizationCode: String!
  codeVerifier: String!
}

input SignInWithAuthenticationOTPInput {
  email: Email
  password: String
}

input SignUpWithInput {
  authentication: SignUpWithAuthenticationInput
}

input SignUpWithAuthenticationInput {
  emailPassword: SignUpWithAuthenticationEmailPasswordInput
  google: SignUpWithAuthenticationGoogleInput
  OTP: SignUpWithAuthenticationOTPInput
}

input SignUpWithAuthenticationEmailPasswordInput {
  email: Email!
  password: String!
}

input SignUpWithAuthenticationGoogleInput {
  authorizationCode: String!
  codeVerifier: String!
}

input SignUpWithAuthenticationOTPInput {
  email: Email
  password: String
}