/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  Collection1Input: { // input type
    age?: number | null; // Int
    name?: string | null; // String
  }
  DeleteCollection1Input: { // input type
    id: string; // ID!
  }
  DeleteCollection1sInput: { // input type
    age?: NexusGenInputs['WhereDeleteAgeInput'] | null; // WhereDeleteAgeInput
    name?: NexusGenInputs['WhereDeleteNameInput'] | null; // WhereDeleteNameInput
  }
  UpdateCollection1Input: { // input type
    fields?: NexusGenInputs['Collection1Input'] | null; // Collection1Input
    id: string; // ID!
  }
  UpdateCollection1sInput: { // input type
    age?: NexusGenInputs['WhereUpdateAgeInput'] | null; // WhereUpdateAgeInput
    name?: NexusGenInputs['WhereUpdateNameInput'] | null; // WhereUpdateNameInput
  }
  WhereDeleteAgeInput: { // input type
    equalTo?: number | null; // Int
    greaterThan?: number | null; // Int
    greaterThanOrEqualTo?: number | null; // Int
    lessThan?: number | null; // Int
    lessThanOrEqualTo?: number | null; // Int
    notEqualTo?: number | null; // Int
  }
  WhereDeleteNameInput: { // input type
    equalTo?: string | null; // String
    notEqualTo?: string | null; // String
  }
  WhereUpdateAgeInput: { // input type
    equalTo?: number | null; // Int
    greaterThan?: number | null; // Int
    greaterThanOrEqualTo?: number | null; // Int
    lessThan?: number | null; // Int
    lessThanOrEqualTo?: number | null; // Int
    notEqualTo?: number | null; // Int
  }
  WhereUpdateNameInput: { // input type
    equalTo?: string | null; // String
    notEqualTo?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Collection1: { // root type
    age?: number | null; // Int
    name?: string | null; // String
  }
  Mutation: {};
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Collection1: { // field return type
    age: number | null; // Int
    name: string | null; // String
  }
  Mutation: { // field return type
    createCollection1: NexusGenRootTypes['Collection1'] | null; // Collection1
    createCollection1s: Array<NexusGenRootTypes['Collection1'] | null> | null; // [Collection1]
    deleteCollection1: NexusGenRootTypes['Collection1'] | null; // Collection1
    deleteCollection1s: Array<NexusGenRootTypes['Collection1'] | null> | null; // [Collection1]
    updateCollection1: NexusGenRootTypes['Collection1'] | null; // Collection1
    updateCollection1s: Array<NexusGenRootTypes['Collection1'] | null> | null; // [Collection1]
  }
  Query: { // field return type
    collection1: NexusGenRootTypes['Collection1'] | null; // Collection1
    collection1s: Array<NexusGenRootTypes['Collection1'] | null> | null; // [Collection1]
  }
}

export interface NexusGenFieldTypeNames {
  Collection1: { // field return type name
    age: 'Int'
    name: 'String'
  }
  Mutation: { // field return type name
    createCollection1: 'Collection1'
    createCollection1s: 'Collection1'
    deleteCollection1: 'Collection1'
    deleteCollection1s: 'Collection1'
    updateCollection1: 'Collection1'
    updateCollection1s: 'Collection1'
  }
  Query: { // field return type name
    collection1: 'Collection1'
    collection1s: 'Collection1'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCollection1: { // args
      input?: NexusGenInputs['Collection1Input'] | null; // Collection1Input
    }
    createCollection1s: { // args
      input?: NexusGenInputs['Collection1Input'] | null; // Collection1Input
    }
    deleteCollection1: { // args
      input?: NexusGenInputs['DeleteCollection1Input'] | null; // DeleteCollection1Input
    }
    deleteCollection1s: { // args
      where?: NexusGenInputs['DeleteCollection1sInput'] | null; // DeleteCollection1sInput
    }
    updateCollection1: { // args
      input?: NexusGenInputs['UpdateCollection1Input'] | null; // UpdateCollection1Input
    }
    updateCollection1s: { // args
      where?: NexusGenInputs['UpdateCollection1sInput'] | null; // UpdateCollection1sInput
    }
  }
  Query: {
    collection1: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}