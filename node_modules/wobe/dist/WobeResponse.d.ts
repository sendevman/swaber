/// <reference types="node" />
export interface SetCookieOptions {
    path?: string;
    domain?: string;
    expires?: Date;
    maxAge?: number;
    secure?: boolean;
    httpOnly?: boolean;
    sameSite?: 'Strict' | 'Lax' | 'None';
}
export declare class WobeResponse {
    request: Request;
    response: Response | undefined;
    headers: import("undici-types").Headers;
    status: number;
    statusText: string;
    constructor(request: Request);
    /**
     * Set a cookie
     * @param name The name of the cookie
     * @param value The value of the cookie
     * @param options The options of the cookie
     */
    setCookie(name: string, value: string, options?: SetCookieOptions): void;
    /**
     * Get a cookie
     * @param cookieName The name of the cookie
     */
    getCookie(cookieName: string): string | undefined;
    /**
     * Delete a cookie
     * @param name The name of the cookie
     */
    deleteCookie(name: string): void;
    /**
     * Send a JSON response
     * @param content The json content of the response
     * @returns The response
     */
    sendJson(content: Record<string, any>): Response;
    /**
     * Send a text response
     * @param content The text content of the response
     * @returns The response
     */
    sendText(content: string): Response;
    /**
     * Send a response (text or json)
     * @param content The content of the response
     * @param object The object contains the status, statusText and headers of the response
     * @returns The response
     */
    send(content: string | Record<string, any>, { status, statusText, headers, }?: {
        status?: number;
        statusText?: string;
        headers?: Record<string, any>;
    }): Response;
}
