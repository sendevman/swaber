/// <reference types="node" />
import type { WobeHandler } from './Wobe';
import { WobeResponse } from './WobeResponse';
import type { RadixTree } from './router';
export declare class Context {
    res: WobeResponse;
    request: Request;
    params: Record<string, string>;
    pathname: string;
    query: Record<string, string>;
    state: 'beforeHandler' | 'afterHandler';
    requestStartTimeInMs: number | undefined;
    getIpAdress: () => string;
    handler: WobeHandler | undefined;
    beforeHandlerHook: Array<WobeHandler>;
    afterHandlerHook: Array<WobeHandler>;
    constructor(request: Request, router?: RadixTree);
    private _findRoute;
    /**
     * Redirect to a specific URL
     * @param url The URL to redirect
     * @param status The status of the redirection
     */
    redirect(url: string, status?: number): void;
    /**
     * Execute the handler of the route
     */
    executeHandler(): Promise<Response>;
}
