/// <reference types="node" />
/// <reference types="bun-types" />
/// <reference types="node" />
/// <reference types="bun-types" />
import type { ServerWebSocket } from 'bun';
import type { Context } from './Context';
export type MaybePromise<T> = T | Promise<T>;
export type Routes = Array<{
    path: string;
    handler: WobeHandler;
    method: HttpMethod;
}>;
export interface WobeOptions {
    hostname?: string;
    onError?: (error: Error) => void;
    onNotFound?: (request: Request) => void;
    tls?: {
        key: string;
        cert: string;
        passphrase?: string;
    };
}
export type HttpMethod = 'POST' | 'GET' | 'DELETE' | 'PUT' | 'ALL';
export type WobeHandlerOutput = void | Promise<void> | undefined | Response | Promise<Response>;
export type WobeHandler = (ctx: Context) => WobeHandlerOutput;
export type WobePlugin = (wobe: Wobe) => void;
/**
 * Hook is the state of the request, it can be before the handler, after the handler or both
 */
export type Hook = 'beforeHandler' | 'afterHandler' | 'beforeAndAfterHandler';
/**
 * WobeWebSocket is the configuration for the WebSocket server
 * @param path The path of the WebSocket server
 * @param compression Enable or disable the compression of the WebSocket server
 * @param maxPayloadLength The maximum length of the payload
 * @param idleTimeout The time before the WebSocket server is closed
 * @param backpressureLimit The limit of the backpressure
 * @param closeOnBackpressureLimit Close the WebSocket server if the backpressure limit is reached
 * @param beforeWebSocketUpgrade Array of handlers before the WebSocket server is upgraded
 * @param onOpen Handler when the WebSocket server is opened
 * @param onMessage Handler when the WebSocket server receives a message
 * @param onClose Handler when the WebSocket server is closed
 * @param onDrain Handler when the WebSocket server is drained
 */
export interface WobeWebSocket {
    path: string;
    compression?: boolean;
    maxPayloadLength?: number;
    idleTimeout?: number;
    backpressureLimit?: number;
    closeOnBackpressureLimit?: boolean;
    beforeWebSocketUpgrade?: Array<WobeHandler>;
    onOpen?(ws: ServerWebSocket<any>): void;
    onMessage?(ws: ServerWebSocket<any>, message: string | Buffer): void;
    onClose?(ws: ServerWebSocket<any>, code: number, message: string | Buffer): void;
    onDrain?(ws: ServerWebSocket<any>): void;
}
/**
 * Wobe is the main class of the framework
 */
export declare class Wobe {
    private options?;
    private server;
    private hooks;
    private router;
    private runtimeAdapter;
    private httpMethods;
    private webSocket;
    /**
     * Constructor of the Wobe class
     * @param options The options of the Wobe class
     */
    constructor(options?: WobeOptions);
    /**
     * get is the method to handle the GET requests
     * @param path The path of the request
     * @param handler The handler of the request
     * @param hook The hook of the request (optional)
     */
    get(path: string, handler: WobeHandler, hook?: WobeHandler): this;
    /**
     * post is the method to handle the POST requests
     * @param path The path of the request
     * @param handler The handler of the request
     * @param hook The hook of the request (optional)
     */
    post(path: string, handler: WobeHandler, hook?: WobeHandler): this;
    /**
     * put is the method to handle the PUT requests
     * @param path The path of the request
     * @param handler The handler of the request
     * @param hook The hook of the request (optional)
     */
    put(path: string, handler: WobeHandler, hook?: WobeHandler): this;
    /**
     * delete is the method to handle the DELETE requests
     * @param path The path of the request
     * @param handler The handler of the request
     * @param hook The hook of the request (optional)
     */
    delete(path: string, handler: WobeHandler, hook?: WobeHandler): this;
    /**
     * all is the method to handle all the requests
     * @param path The path of the request
     * @param handler The handler of the request
     * @param hook The hook of the request (optional)
     */
    all(path: string, handler: WobeHandler, hook?: WobeHandler): this;
    private _addHook;
    /**
     * beforeAndAfterHandler is the method to handle the before and after handlers
     * @param arg1 The path of the request or the handler
     * @param handlers The handlers of the request
     */
    beforeAndAfterHandler(arg1: string | WobeHandler, ...handlers: WobeHandler[]): this;
    /**
     * beforeHandler is the method to handle the before handlers
     * @param arg1 The path of the request or the handler
     * @param handlers The handlers of the request
     */
    beforeHandler(arg1: string | WobeHandler, ...handlers: WobeHandler[]): this;
    /**
     * afterHandler is the method to handle the after handlers
     * @param arg1 The path of the request or the handler
     * @param handlers The handlers of the request
     */
    afterHandler(arg1: string | WobeHandler, ...handlers: WobeHandler[]): this;
    /**
     * useWebSocket is the method to handle the WebSocket
     * @param webSocketHandler The WebSocket handler
     */
    useWebSocket(webSocketHandler: WobeWebSocket): this;
    /**
     * usePlugin is the method to use a plugin
     * @param plugin The plugin to use
     * You can find more informations about plugins in the documentation (https://www.wobe.dev/doc/ecosystem/plugins)
     */
    usePlugin(plugin: MaybePromise<WobePlugin>): this;
    /**
     * listen is the method to start the server
     * @param port The port of the server
     * @param callback The callback to execute after the server is started
     */
    listen(port: number, callback?: (options: {
        hostname: string;
        port: number;
    }) => void): this;
    /**
     * stop is the method to stop the server
     */
    stop(): void;
}
